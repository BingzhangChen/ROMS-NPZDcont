#!/bin/bash
####################################################
#               COMPILATION JOB                    #
####################################################
# This 1ยบ Global model uses bulk formula to calculate air-sea interactions
# and uses NPZDDISC model to calculate biology 
# Spinup the first 10 years without biology
# Then add biology afterwards
# 
#
# set source, compilation and run directories
#
start=`date +%s`
export HOME=/archive/G10203/bzchen
export SOURCE=${HOME}/Roms_tools/src
export SCRDIR=Compile
export RUNDIR=./
# AGRIF sources directory
#
AGRIF_SRC=${SOURCE}/AGRIF
#
# determine operating system
#
export OS=Darwin
echo "OPERATING SYSTEM IS: $OS"
#
# compiler options
#
if [[ $OS == Linux ]] ; then

	LINUX_FC=gfortran
#
#	set 32 or 64 Bits executable
#
	ARCH=`uname -m`
	echo "PROCESSOR IS: $ARCH"
	if [[ $ARCH == x86_64 ]] ; then
		BITS=SIXTYFOUR
	else
    	BITS=THIRTYTWO
	fi

elif [[ $OS == Darwin ]] ; then

        DARWIN_FC=ifort

else
  	BITS=THIRTYTWO
fi

#
echo "set NETCDF directories"
#

#if [[ $OS == Linux ]] ; then
#  if [[ $LINUX_FC == g77 ]] ; then
#    if [[ $BITS == THIRTYTWO ]] ; then
#      NETCDFLIB="-L../../netcdf_g77 -lnetcdf"
#      NETCDFINC="-I../../netcdf_g77"
#    fi
#  elif [[ $LINUX_FC == ifort || $LINUX_FC == gfortran ]] ; then
#    if [[ $BITS == THIRTYTWO ]] ; then
#      NETCDFLIB="-L../../netcdf_ifc -lnetcdf"
#      NETCDFINC="-I../../netcdf_ifc"
#    else
#      NETCDFLIB="-L../../netcdf_x86_64 -lnetcdf"
#      NETCDFINC="-I../../netcdf_x86_64"
#    fi
#  fi
#fi

#
# If needed set your own NETCDF directories
#
NETCDFLIB="-L/opt/atlocal/netcdf/4.1.3/lib -lnetcdff -L/opt/atlocal/hdf5/1.8.8/lib -L/opt/atlocal/szip/2.1/lib -lnetcdf -lhdf5_hl -lhdf5 -lm -lcurl -lsz -lm -lrt -lz"
NETCDFINC="-I/opt/atlocal/netcdf/4.1.3/include"

#-----------------------------------------------------------
# Use : 
#-lnetcdf           : version netcdf-3.6.3                --
#-lnetcdff -lnetcdf : version netcdf-4.1.2                --
#-lnetcdff          : version netcdf-fortran-4.2-gfortran --
#-----------------------------------------------------------

#
# set MPI directories if needed
#
echo "set MPI directories"
MPIF90="ifort"
MPILIB="-lmpi"
MPIINC=""
#
# set OASIS-MCT (or OASIS3) directories if needed
#
#PRISM_ROOT_DIR=../../oasis3-mct/compile_oa3-mct
#
# END OF USER'S MODIFICATIONS
####################################################
#
# Use GNU Make command
#
MAKE=make
#
# clean scratch area
#
clean=1
if [[ $clean == 1 ]] ; then
     echo " Copy source files from ROMS-Agrif..."
     echo " Deleting source files in the Compile folder..."
     rm -rf $SCRDIR
     mkdir $SCRDIR
     #
     #
     # copy SOURCE code
     #
     cp -f ${SOURCE}/*.F $SCRDIR
     cp -f ${SOURCE}/*.h $SCRDIR
     cp -f ${SOURCE}/Make* $SCRDIR
     cp -f ${SOURCE}/testkeys.F $SCRDIR
     cp -f ${SOURCE}/jobcomp $SCRDIR
     cp -f ${SOURCE}/amr.in $SCRDIR
     cp -RLf ${AGRIF_SRC} $SCRDIR
  #   /bin/cp -f ${SOURCE}/PISCES/* $SCRDIR
  #   /bin/cp -f ${SOURCE}/PISCES/kRGB61.txt $RUNDIR
     if [[ -e "namelist.trc.sms" ]] ; then
     	echo "  file namelist.trc.sms exists in Run directory"
     else
     	cp -f ${SOURCE}/PISCES/namelist.trc.sms* $RUNDIR
     	echo "  file namelist.trc.sms copied from source directory"
     fi
     #
     # overwrite with local files
     #
     cp -f *.F $SCRDIR
     cp -f *.h $SCRDIR
     cp -f Make* $SCRDIR
     cp -f jobcomp.bash $SCRDIR
     cp -f amr.in $SCRDIR
fi
#
# Change directory
#
cd $SCRDIR
#
# generates LDFLAGS1 according to users notifications
#
LDFLAGS1="$NETCDFLIB"
CPPFLAGS1="$NETCDFINC -IROMSFILES/AGRIF_INC"
#
# Set compilation options (Set CPP, CFT, FFLAGS, and LDFLAGS)
#
Test=0
if [[ $OS == Linux ]] ; then           # ===== LINUX =====
	if [[ $LINUX_FC == ifort || $LINUX_FC == ifc ]] ; then
		CPP1="cpp -traditional -DLinux -DIfort"
		CFT1=ifort
		FFLAGS1="-O3 -w90 -w95 -cm -72 -fno-alias -i4 -r8 -fp-model precise"
		LDFLAGS1="-Vaxlib $LDFLAGS1"
	elif [[ $LINUX_FC == gfortran ]] ; then
		CPP1="cpp -traditional -DLinux"
		CFT1=gfortran
		FFLAGS1="-O3 -fdefault-real-8 -fdefault-double-8 -mcmodel=medium"
#		 FFLAGS1="-O0 -g -fdefault-real-8 -fdefault-double-8 -fbacktrace \
#			-fbounds-check -finit-real=nan -finit-integer=8888"
		LDFLAGS1="$LDFLAGS1"
	fi
elif [[ $OS == Darwin ]] ; then        # ===== DARWIN =====
	CPP1="cpp -traditional -DLinux"
#        CPP1="fpp -fixed"
	if [[ $DARWIN_FC == gfortran ]] ; then  
        	CFT1="gfortran"
        	FFLAGS1="-O4 -fdefault-real-8 -fdefault-double-8"
#	 	FFLAGS1="-O0 -g -fdefault-real-8 -fdefault-double-8 -fbacktrace \
#			-fbounds-check -finit-real=nan -finit-integer=8888"
	else
		CFT1="ifort"
                if [[ $Test == 0 ]]; then
                   echo 'Run model without debug options...'
                   FFLAGS1="-O3 -r8 -i4 -ipo"
                else
                   echo 'Run model with debug options...'
                   FFLAGS1="-O0 -r8 -i4 -g -check all -fpe0 -warn -traceback -debug extended -nogen-interface"
                fi
#		FFLAGS1="-O2 -r8 -i4 -g -72 -CB -CU"
#		FFLAGS1="-O0 -g -traceback -debug all -r8 -i4 -g -72"
	fi
elif [[ $OS == AIX ]] ; then           # ===== IBM =====
	CPP1="/lib/cpp"
	CFT1="xlf95 -I$HOME/include/"
	if  [[ $BITS == THIRTYTWO ]] ; then
		MAKEAGRIF="Makefile.ibm"
		FFLAGS1="-qfixed -O5 -qstrict -qalias=noaryovrlp -qhot -qrealsize=8 \
			-qintsize=4 -qarch=auto -qtune=auto -qcache=auto -bmaxdata:0x80000000"
#		FFLAGS1="-g -qfixed -O2 -qstrict -qalias=noaryovrlp -qrealsize=8 \
#			-qintsize=4 -qarch=auto -qtune=auto -qcache=auto -bmaxdata:0x80000000"
	else
		MAKEAGRIF="Makefile.ibm.64"
		FFLAGS1="-q64 -qwarn64 -qfixed -qrealsize=8 -qintsize=8 -qhot \
			-qalias=noaryovrlp -qthreaded -O3 -qarch=pwr4 -qtune=pwr4 -qunroll=yes"
	fi
elif [[ $OS == OSF1 ]] ; then          # ===== COMPAQ =====
	CPP1="/lib/cpp"
	CFT1="f95"
	FFLAGS1="-fast -i4 -r8"
elif [[ $OS == IRIX64 ]] ; then        # ===== SGI =====
	CPP1="/usr/freeware/bin/cpp -traditional"
	CFT1="f90"
	FFLAGS1="-O2"
elif [[ $OS == SunOS ]] ; then         # ===== SUN ===== :  tested on SunFire 880 (SPARC III)
	GREP="/usr/xpg4/bin/grep"      #                         and Sun Ultra-60 (SPARC II)
	CPP1=/lib/cpp
	CFT1="f95"
	if [[ $BITS == THIRTYTWO ]] ; then
		MAKEAGRIF="Makefile.sun"
		FFLAGS1="-O5 -xtarget=native -xprefetch -xtypemap=real:64,double:128 -xlibmopt"
	else
		MAKEAGRIF="Makefile.sun.64"
		FFLAGS1="-O5 -xtarget=native64 -xprefetch -xtypemap=real:64,double:128 -xlibmopt "
	fi
else
	echo "Unknown Operating System"
	exit
fi
#
# determine if AGRIF compilation is required
#
unset COMPILEAGRIF
echo "Checking COMPILEAGRIF..."
if $($CPP1 testkeys.F | grep -i -q agrifisdefined) ; then
	echo " => AGRIF activated"
	COMPILEAGRIF=TRUE
	FFLAGS1="$FFLAGS1 -IAGRIF"
	LDFLAGS1="-LAGRIF -lagrif $LDFLAGS1"
# we use the AGRIF Makedefs.generic definition
	/bin/cp -f Makedefs.generic.AGRIF Makedefs.generic
fi

#
# determine if MPI compilation is required
#
unset COMPIdefined LEMPI
echo "Checking COMPILEMPI..."
if $($CPP1 testkeys.F | grep -i -q mpiisdefined) ; then
	echo " => MPI activated"
	COMPILEMPI=TRUE
	LDFLAGS1="$LDFLAGS1 $MPILIB"
	CPPFLAGS1="$CPPFLAGS1 $MPIINC"
	FFLAGS1="$FFLAGS1 $MPIINC"
	CFT1="$MPIF90"
fi
#
# determine if OASIS compilation is required
#
unset COMPILEOASIS
echo "Checking COMPILEOASIS..."
if $($CPP1 testkeys.F | grep -i -q oacplisdefined) ; then
    echo " => OASIS activated"
    CHAN=MPI1
    if $($CPP1 testkeys.F | grep -i -q oacpl_mctisdefined) ; then
	echo " => OASIS-MCT activated"
	LIBPSMILE="${PRISM_ROOT_DIR}/lib/libpsmile.${CHAN}.a ${PRISM_ROOT_DIR}/lib/libmct.a  ${PRISM_ROOT_DIR}/lib/libmpeu.a ${PRISM_ROOT_DIR}/lib/libscrip.a"
	PSMILE_INCDIR="-I${PRISM_ROOT_DIR}/build/lib/psmile.${CHAN} -I${PRISM_ROOT_DIR}/build/lib/mct"
    elif $($CPP1 testkeys.F | grep -i -q oacpl_oa3isdefined) ; then
	echo " => OASIS3 activated"
	LIBPSMILE="${PRISM_ROOT_DIR}/lib/libanaisg.a ${PRISM_ROOT_DIR}/lib/libanaism.a ${PRISM_ROOT_DIR}/lib/libclim.${CHAN}.a ${PRISM_ROOT_DIR}/lib/libpsmile.${CHAN}.a ${PRISM_ROOT_DIR}/lib/libfscint.a  ${PRISM_ROOT_DIR}/lib/libmpp_io.a ${PRISM_ROOT_DIR}/lib/libscrip.a"
	PSMILE_INCDIR="-I${PRISM_ROOT_DIR}/build/lib/psmile.${CHAN} -I${PRISM_ROOT_DIR}/build/lib/clim.${CHAN} -I${PRISM_ROOT_DIR}/build/lib/mpp_io"
    fi
    COMPILEOASIS=TRUE
    LDFLAGS1="$LIBPSMILE $LDFLAGS1"
    CPPFLAGS1="${PSMILE_INCDIR} $CPPFLAGS1"
    FFLAGS1="${PSMILE_INCDIR} $FFLAGS1"
fi
#
# rewrite Makedefs according to previous flags
# with MPI flags if needed
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# clean scratch
#
$MAKE clobber

#
# compile the precompiling program
#
$MAKE mpc

#
# prepare and compile the library
#
if [[ $COMPILEAGRIF ]] ; then
#
# compile the AGRIF librairy
#
	if [[ $COMPILEMPI ]] ; then
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" CPPFLAGS="-DAGRIF_MPI $MPIINC" FFLAGS="$FFLAGS1"
	else
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" FFLAGS="$FFLAGS1"
	fi
	if [[ $OS == Darwin ]] ; then          # DARWIN
# run RANLIB on Darwin system
		ranlib AGRIF/libagrif.a
	fi
#
	$CPP1 amr.in | grep -v -e ! -e '#' -e % -e '*' > amr.scrum
	mkdir ROMSFILES
	mv AGRIF/conv ROMSFILES/.
	mv amr.scrum ROMSFILES/.
	cd ROMSFILES
	mkdir AGRIF_MODELFILES
	mkdir AGRIF_INC
	cd ..
	for i in *.h ; do
		echo $i
		cat cppdefs.h $i | cpp -P | grep -v -e ! -e '#' -e % -e '*' > ROMSFILES/$i
	done
	mv -f ROMSFILES/private_scratch_AMR.h ROMSFILES/private_scratch.h
fi

#
# determine if OPENMP compilation is needed
#
unset COMPILEOMP
if $($CPP1 testkeys.F | grep -i -q openmp) ; then
	COMPILEOMP=TRUE
	if [[ $OS == Linux ]] ; then
		if [[ $LINUX_FC == gfortran ]] ; then
			FFLAGS1="$FFLAGS1 -fopenmp"
		elif [[ $LINUX_FC == ifort || $LINUX_FC == ifc ]] ; then
			FFLAGS1="$FFLAGS1 -openmp"
		else
			FFLAGS1="$FFLAGS1 -openmp"
		fi
	elif [[ $OS == Darwin ]] ; then 
		if [[ $DARWIN_FC == gfortran ]] ; then 
			FFLAGS1="$FFLAGS1 -fopenmp"
    		else
			FFLAGS1="$FFLAGS1 -openmp"
		fi
	elif [[ $OS == AIX ]] ; then
		FFLAGS1="$FFLAGS1 -qsmp=omp"
		CFT1="xlf95_r"
	elif [[ $OS == OSF1   ]] ; then
		FFLAGS1="$FFLAGS1 -omp"
	elif [[ $OS == IRIX64 ]] ; then
		FFLAGS1="$FFLAGS1 -mp"
	elif [[ $OS == SunOS  ]] ; then 
		FFLAGS1="$FFLAGS1 -openmp"
	fi
fi

#
# rewrite Makedefs according to previous flags
# with openmp flags if needed
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# compile roms
#
$MAKE 
mv roms ../
end=`date +%s`
echo "$((end-start))"
echo " End of jobcomp."
#
